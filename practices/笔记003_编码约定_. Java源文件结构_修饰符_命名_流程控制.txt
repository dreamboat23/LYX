一. Java编程语言编码约定（参考sun的文档和阿里巴巴Java开发手册，结合Eclipse的Formatter）
（文件参见代码规范）
1.Eclipse编码规范
Window-->Preferences-->Java-->Code Style-->Formatter
2.官方文档
见同目录文档
3.阿里开发手册
见同目录文档


二. Java源文件结构：开头注释→package和import→类或接口注释→类或接口声明→类的变量→实例变量→构造器→方法
1.注释（版权所有等）
2.包名package
3.import
4.类的注释
5.类声明class
6.成员变量声明(默认顺序为public->procted->private)
7.构造器（通过注解生成）
8.公有/私有方法


三. 修饰符：public，protected，private
    public:当此修饰符修饰类。那么，这个类将对外保持公开。也就是说，对任何包下的
        任何类都是可用的。
    private:当此修饰符修饰类。那么，这个类将对外不公开。也就是说，除类型创建者和
        类型内部方法之外的任何元素都不能访问。
    protected:当此修饰符修饰类。那么，这个类将对外保持半公开。可以理解为：同包、
        子类和本身可以访问。当然，这里要注意一下，不同包下的子类不能访问。


四. 命名：包，类，接口，方法，变量，实例，常量(阿里巴巴Java开发手册-命名规约)
【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。
反例： _name / __name / Object/name/name / Object$

【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。
说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。
反例： DaZhePromotion [ 打折 ] / getPingfenByName() [ 评分 ] / int 某变量 = 3
正例： alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文。

【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： （ 领域模型的相关命名 ）DO / BO / DTO / VO 等。
正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion
反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion

【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。
正例： localValue / getHttpMessage() / inputUserId

【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。
正例： MAX _ STOCK _ COUNT
反例： MAX _ COUNT

【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类命名以它要测试的类的名称开始，以 Test 结尾。

【强制】中括号是数组类型的一部分，数组定义如下： String[] args;
反例：使用 String args[] 的方式来定义。

【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。
反例：定义为基本数据类型 Boolean isSuccess； 的属性，它的方法也是 isSuccess() ， RPC框架在反向解析的时候，“以为”对应的属性名称是 success ，导致属性获取不到，进而抛出异
常。

【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。
正例： 应用工具类包名为 com . alibaba . open . util 、类名为 MessageUtils（ 此规则参考spring 的框架结构 ）

【强制】杜绝完全不规范的缩写，避免望文不知义。
反例： AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成 condi ，此类随意缩写严重降低了代码的可阅读性。

【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。
说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。
正例： public class OrderFactory;
public class LoginProxy;
public class ResourceObserver;

【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是
与接口方法相关，并且是整个应用的基础常量。
正例：接口方法签名： void f();
接口基础常量表示： String COMPANY = ” alibaba ” ;
反例：接口方法定义： public abstract void f();
说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。

接口和实现类的命名有两套规则：
1 . 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部
的实现类用 Impl 的后缀与接口区别。
正例： CacheServiceImpl 实现 CacheService 接口。
2 . 【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是– able 的形式 ） 。
正例： AbstractTranslator 实现 Translatable 。

【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。
说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。
正例：枚举名字： DealStatusEnum， 成员名称： SUCCESS / UNKOWN _ REASON 。

【参考】各层命名规约：
A. Service / DAO 层方法命名规约
1 . 获取单个对象的方法用 get 做前缀。
2 . 获取多个对象的方法用 list 做前缀。
3 . 获取统计值的方法用 count 做前缀。
4 . 插入的方法用 save（ 推荐 ） 或 insert 做前缀。
5 . 删除的方法用 remove（ 推荐 ） 或 delete 做前缀。
6 . 修改的方法用 update 做前缀。
B. 领域模型命名规约
1 . 数据对象： xxxDO ， xxx 即为数据表名。
2 . 数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。
3 . 展示对象： xxxVO ， xxx 一般为网页名称。
4 . POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO


五. 操作符，流程控制（if-else，do-while，for，switch，return，break，continue）
    if-else:
        (1)
        * A:选择结构的分类
            * if语句
            * switch语句
        * B:if语句有几种格式
            * 格式1
            * 格式2
            * 格式3
        * C:if语句的格式1
        * 
                if(比较表达式) {
                    语句体;
                }
        * D:执行流程：
            * 先计算比较表达式的值，看其返回值是true还是false。
            * 如果是true，就执行语句体；
            * 如果是false，就不执行语句体；

        (2)
        * A:if语句的格式2
        * 
                if(比较表达式) {
                    语句体1;
                }else {
                    语句体2;
                }
        * B:执行流程：
            * 首先计算比较表达式的值，看其返回值是true还是false。
            * 如果是true，就执行语句体1；
            * 如果是false，就执行语句体2；
        * C:案例演示
            * a:获取两个数据中较大的值
            * b:判断一个数据是奇数还是偶数,并输出是奇数还是偶数

            * 注意事项：else后面是没有比较表达式的，只有if后面有。

        (3)
        * A:if语句的格式3：
        * 
                if(比较表达式1) {
                    语句体1;
                }else if(比较表达式2) {
                    语句体2;
                }else if(比较表达式3) {
                    语句体3;
                }
                ...
                else {
                    语句体n+1;
                }
        * B:执行流程：
            * 首先计算比较表达式1看其返回值是true还是false，
            * 如果是true，就执行语句体1，if语句结束。
            * 如果是false，接着计算比较表达式2看其返回值是true还是false，
            
            * 如果是true，就执行语句体2，if语句结束。
            * 如果是false，接着计算比较表达式3看其返回值是true还是false，
            
            * 如果都是false，就执行语句体n+1。
        * C:注意事项:最后一个else可以省略,但是建议不要省略,可以对范围外的错误值提示


        switch:
        (1)
        * A:switch语句的格式
        * 
                switch(表达式) {       //基本数据类型可以接收byte,short,char,int
                      case 值1：       //引用数据类型可以接收枚举（JDK1.5）String字符串（JDK1.7）
                        语句体1;
                        break;
                        case 值2：
                        语句体2;
                        break;
                        …
                        default：	
                        语句体n+1;
                        break;
                }
         
        * B:switch语句的格式解释
        * C:注意事项
            * byte可以作为switch的表达式吗?y
            * long可以作为switch的表达式吗?n
            * String可以作为switch的表达式吗?y

            * a:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的
            * b:default可以省略吗?
                * 可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。
                * 特殊情况：
                    * case就可以把值固定。
                    * A,B,C,D
            * c:break可以省略吗?
                * 最后一个可以省略,其他最好不要省略
                * 会出现一个现象：case穿透。
                * 最终我们建议不要省略
            * d:default一定要在最后吗?
                * 不是，可以在任意位置。但是建议在最后。
            * e:switch语句的结束条件
                * a:遇到break就结束了
        * b:执行到switch的右大括号就结束了
        * D:执行流程
            * 先计算表达式的值
            * 然后和case后面的匹配，如果有就执行对应的语句，否则执行default控制的语句

        for:
        * A:循环结构的分类
            * for,while,do...while 
        * B:循环结构for语句的格式：
        * 
                for(初始化表达式;条件表达式;循环后的操作表达式) {
                    循环体;
                }
        * C执行流程：
            * a:执行初始化语句
            * b:执行判断条件语句,看其返回值是true还是false
                * 如果是true，就继续执行
                * 如果是false，就结束循环
            * c:执行循环体语句;
            * d:执行循环后的操作表达式
            * e:回到B继续。
        * D:注意事项
            * a:判断条件语句无论简单还是复杂结果是boolean类型。
            * b:循环体语句如果是一条语句，大括号可以省略；如果是多条语句，大括号不能省略。建议永远不要省略。
            * c:一般来说：有左大括号就没有分号，有分号就没有左大括号

        while:
        * A:循环结构while语句的格式：
        * 		
                while循环的基本格式：
                while(判断条件语句) {
                    循环体语句;
                }
                
                完整格式：
                
                初始化语句;
                while(判断条件语句) {
                     循环体语句;
                     控制条件语句;
                }
        * B:执行流程：
            * a:执行初始化语句
            * b:执行判断条件语句,看其返回值是true还是false
                * 如果是true，就继续执行
                * 如果是false，就结束循环
            * c:执行循环体语句;
            * d:执行控制条件语句
            * e:回到B继续。
        * C:案例演示
            * 需求：请在控制台输出数据1-10

        do-while：
        * A:循环结构do...while语句的格式：
        * 
                do {
                    循环体语句;
                }while(判断条件语句);
                
                完整格式；
                初始化语句;
                do {
                    循环体语句;
                    控制条件语句;
                }while(判断条件语句);
        * B:执行流程：
            * a:执行初始化语句
            * b:执行循环体语句;
            * c:执行控制条件语句
            * d:执行判断条件语句,看其返回值是true还是false
                * 如果是true，就继续执行
                * 如果是false，就结束循环
            * e:回到b继续。
        * C:案例演示
            * 需求：请在控制台输出数据1-10

        循环结构三种循环语句的区别：
        * 三种循环语句的区别:
        * do...while循环至少执行一次循环体。
        * 而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。
        * for循环和while循环的区别：
            * A:如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。
            不知道用谁就用for循环。因为变量及早的从内存中消失，可以提高内存的使用效率。

        Java中关键字continue、break和return的区别：
        * continue：跳出本次循环继续下一次循环

        * break：   跳出循环体，继续执行循环外的函数体

        * return:   跳出整个函数体，函数体后面的部分不再执行





